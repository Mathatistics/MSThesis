% !Rnw root = ../Main.Rnw


%% Plotting Time Series Data Series
<<functions, echo=FALSE, cache=FALSE, warning=FALSE>>=
plotTS<-function(dataSet, vars, colVar=NA){
  plt<-ggplot(filter(dataSet, variable%in%vars), aes(Date))
  ifelse(is.na(colVar),
  plt<-plt+geom_line(aes(y=value), size=.3),
  plt<-plt+geom_line(aes_string(y="value", col=colVar), size=.3)    
  )
  plt<-plt+theme_bw()
  plt<-plt+theme(axis.text=element_text(size=7), strip.text.x=element_text(size=8))
  plt<-plt+facet_wrap(~variable, scales = "free_y", ncol=3)
  plt<-plt+theme(legend.position="top", legend.title=element_blank())
  return(plt)
}

## Plotting Model Coefficients with their state of significance
test.plot<-function(model, alpha=0.05){
  .e<-environment()
  coef.matrix<-data.frame(summary(model)$coef)
  names(coef.matrix)<-c("Estimate", "StdError", "t.value", "p.value")
  idx<-order(row.names(coef.matrix))
  cp<-ggplot(coef.matrix[idx,], aes(x=row.names(coef.matrix[idx,]), y=t.value), environment = .e)
  cp<-cp+geom_bar(stat="identity", position = "identity",
                  fill=ifelse(coef.matrix[idx,"p.value"]<alpha, "coral3", "cornflowerblue"))
  cp<-cp+geom_text(aes(y=ifelse(coef.matrix[idx, "t.value"]>0,t.value+0.7, t.value-0.7), 
                       label=round(coef.matrix[idx,"Estimate"], 2)), angle=45, size=5)
  cp<-cp+theme_bw()+labs(x="", y="T-Value")
  cp<-cp+theme(axis.text.x=element_text(angle=90, hjust=1))
  cp<-cp+theme(text=element_text(size=20))
  cp<-cp+scale_fill_manual("Status", values=c("firebrick2", "dodgerblue3"), 
                           labels=c("Significant", "Non-Significant"))
  cp<-cp+geom_hline(yintercept=c(-1,1)*qt(alpha/2, df = abs(diff(dim(model$model[,-1]))), lower.tail = F), 
                    color="red", linetype="dashed")
  cp<-cp+theme(legend.title=element_blank(), 
               legend.position=c(0.8, 0.2))
  cp<-cp+geom_hline(yintercept=0, color="black", size=.2)
  return(cp)
}

## Fitting Linear Model
fit.model<-function(Model, yVar, xVars, dataSet, scaling=TRUE){
  model<-match.fun(Model)
  formula<-as.formula(paste(yVar, paste(xVars, collapse="+"), sep="~"))
  if(scaling){
      model<-model(formula, data=dataSet, scale=TRUE)
  }else{
      model<-model(formula, data=dataSet)
  }
  return(list(formula=formula, model=model, dataset=dataSet))
}


## Diagnostic Plot using GGPlot
diagPlot<-function(model){
  p1<-ggplot(model, aes(.fitted, .resid))+geom_point()
  p1<-p1+stat_smooth(method="loess")+geom_hline(yintercept=0, col="red", linetype="dashed")
  p1<-p1+xlab("Fitted values")+ylab("Residuals")
  p1<-p1+ggtitle("Residual vs Fitted Plot")+theme_bw()
  
  p2<-ggplot(model, aes(qqnorm(as.vector(.stdresid))[[1]], .stdresid))+geom_point(na.rm = TRUE)
  p2<-p2+geom_abline(aes(qqline(as.vector(.stdresid))))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
  p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
  
  p3<-ggplot(model, aes(.fitted, sqrt(abs(.stdresid))))+geom_point(na.rm=TRUE)
  p3<-p3+stat_smooth(method="loess", na.rm = TRUE)+xlab("Fitted Value")
  p3<-p3+ylab(expression(sqrt("|Standardized residuals|")))
  p3<-p3+ggtitle("Scale-Location")+theme_bw()
  
  p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity")
  p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
  p4<-p4+ggtitle("Cook's distance")+theme_bw()
  
  p5<-ggplot(model, aes(.hat, .stdresid))+geom_point(aes(size=.cooksd), na.rm=TRUE)
  p5<-p5+stat_smooth(method="loess", na.rm=TRUE)
  p5<-p5+xlab("Leverage")+ylab("Standardized Residuals")
  p5<-p5+ggtitle("Residual vs Leverage Plot")
  p5<-p5+scale_size_continuous("Cook's Distance", range=c(1,5))
  p5<-p5+theme_bw()+theme(legend.position="bottom")
  
  p6<-ggplot(model, aes(.hat, .cooksd))+geom_point(na.rm=TRUE)+stat_smooth(method="loess", na.rm=TRUE)
  p6<-p6+xlab("Leverage hii")+ylab("Cook's Distance")
  p6<-p6+ggtitle("Cook's dist vs Leverage hii/(1-hii)")
  p6<-p6+geom_abline(slope=seq(0,3,0.5), color="gray", linetype="dashed")
  p6<-p6+theme_bw()
  
  return(list(rvfPlot=p1, qqPlot=p2, sclLocPlot=p3, cdPlot=p4, rvlevPlot=p5, cvlPlot=p6))
}

## Generate summary plot from a fitted model to annotate other plot
sumryBlock<-function(model){
  return(paste("R-Sq = ",signif(summary(model)$r.squared, 3),
               "\nAdj R-Sq =",signif(summary(model)$adj.r.squared, 3),
               "\nSigma =",signif(summary(model)$sigma, 3),
               "\nF =",signif(as.vector(summary(model)$fstatistic[1]), 4),
               paste("(",paste(as.vector(summary(mdl.ft$cp.model$model)$f[2:3]), collapse=','),")", sep="")
         ))
}

model.sumry<-function(model, call=TRUE, coefMat=TRUE, sumry=TRUE){
    if("lm"%nin%class(model)){
        stop("Model should be of class 'lm'.\n")
    }
    else{
        s<-summary(model)$sigma
        df<-summary(model)$df
        r.sq<-summary(model)$r.squared
        adj.r.sq<-summary(model)$adj.r.squared
        f<-summary(model)$fstatistic[1]
        f.df.num<-summary(model)$fstatistic[2]
        f.df.den<-summary(model)$fstatistic[3]
        if(call){
            print(summary(model)$call)
            cat("\n")
        }
        if(coefMat){
            printCoefmat(summary(model)$coef, digits = 3)
        }
        if(sumry){
            data.frame(Sigma=summary(model)$sigma, 
                       R.Sq=summary(model)$r.squared, 
                       R.Sq.adj=summary(model)$adj.r.squared, 
                       F.value=summary(model)$fstatistic[1], 
                       df=paste(summary(model)$fstatistic[2:3], collapse=","), 
                       p.value=pf(summary(model)$fstatistic[1], 
                                  summary(model)$fstatistic[2],
                                  summary(model)$fstatistic[3], 
                                  lower.tail = FALSE))
        }
    }
}

vifPlot<-function(model){
    if("lm"%nin%class(model)){
        stop("Model should be of class 'lm'.")
    }else{
        coef<-names(vif(model))
        vif<-as.vector(vif(model))
        mdl.label<-ifelse(label(model)=="", deparse(substitute(model)), label(model))
        vifMat<-data.frame(coef, vif)
        p<-ggplot(vifMat, aes(coef, vif))
        p<-p+geom_bar(stat="identity", color="black", fill=NA)+theme_bw()
        p<-p+ggtitle(label = paste("Variance Inflation Function plot\nModel:", mdl.label))
        if(length(coef)>5){
            p<-p+theme(axis.text.x=element_text(hjust=1, angle=90))
        }
        return(p)
    }
}

addline_format <- function(x,...){
    gsub('\\s','\n',x)
}
@

